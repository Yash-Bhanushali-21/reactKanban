{"version":3,"sources":["components/trelloCard.js","reducers/initialData.js","actions/resetActions.js","actions/index.js","components/CardForm.js","actions/cardActions.js","components/ListForm.js","actions/listActions.js","components/TrelloActionButton.js","components/TrelloList.js","App.js","actions/stateActions.js","reducers/listReducer.js","reducers/index.js","store/index.js","index.js"],"names":["CardContainer","styled","div","TrelloCard","designation","title","about","image","id","index","listTitle","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","className","CardContent","Typography","color","gutterBottom","Divider","style","marginBottom","src","component","initialData","cards","resetState","type","CONSTANTS","RESET","payload","STORE_DATA","ADD_CARD","ADD_LIST","DRAG_HAPPENED","FormWrapper","connect","props","useState","isDesignated","setDesignation","hasAbout","setAbout","hasName","setName","noValidate","autoComplete","TextField","inputProps","fontSize","onChange","e","target","value","variant","size","label","Button","onMouseDown","listId","d","a","t","i","dispatch","listID","console","log","closeForm","Icon","Wrapper","ListForm","hasListName","setListName","placeholder","autoFocus","onBlur","closeListForm","styles","openForButtonGroup","display","alignItems","cursor","borderRadius","height","width","paddingLeft","form","flexDirection","formElements","heading","fontWeight","isFormOpen","setFormOpen","isListFormOpen","setListFormOpen","list","renderForm","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","opacity","backgroundColor","onClick","renderAddButton","ListContainer","TrelloList","droppableId","droppableProps","length","map","card","button","state","lists","useEffect","newStateData","localStorage","getItem","JSON","parse","onDragEnd","result","destination","source","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","sort","clear","direction","cardId","CountCard","newState","card_count","curr_cards","storeLocally","setItem","stringify","listsReducer","action","newList","newCard","splice","find","listStart","listEnd","combineReducers","listReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c03861b.chunk.js","sourcesContent":["import React from 'react';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport styled from 'styled-components';\r\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\n\r\nconst TrelloCard = ({ designation ,title , about , image , id , index , listTitle}) => {\r\n  //const img_url = \"\"\r\n    return(\r\n      <Draggable draggableId = {String(id)} index = {index}>\r\n        {provided => (\r\n          <CardContainer ref = {provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n            \r\n           <Card className = {'card'}>\r\n           <CardContent>\r\n           <Typography  color=\"textSecondary\" className = {'heading'} gutterBottom>\r\n            {designation}\r\n           </Typography>\r\n           <Divider style = {{marginBottom : '10px'}} />\r\n           <div className = {'content'}>\r\n             \r\n              <img className = {'img'} src = {image} ></img>\r\n              \r\n              <Typography color = 'textSecondary'component={'span'} >\r\n               <div className = {'wrapper'} >\r\n                 <h2 className ={'title'}>{title}</h2>\r\n                 <p className = {'paragraph'}>{about}</p>\r\n               </div>\r\n              </Typography>\r\n           \r\n           </div>\r\n           <div className=\"footer\">\r\n           {listTitle === 'Review'?<Typography color = 'error' className={'footer'}><WhatshotIcon/>Under Review</Typography>:null}\r\n            {listTitle === 'Shortlisted'?\r\n              <Typography color = 'textPrimary' className={'footer'}><CheckIcon/>Shortlisted</Typography>\r\n            :null\r\n            }\r\n           </div>\r\n           </CardContent>\r\n           \r\n           </Card>\r\n           \r\n         \r\n           </CardContainer>\r\n        )}\r\n       \r\n          </Draggable>\r\n         \r\n    );\r\n}\r\n\r\n\r\nconst CardContainer = styled.div`\r\n  .card{\r\n    padding : 0px;\r\n    width: 100%;\r\n    margin-bottom : 10px;\r\n    height: auto;\r\n    \r\n  }\r\n  \r\n  .heading {\r\n    text-align:center;\r\n    font-weight : bold;\r\n    color : black;\r\n  }\r\n  .content {\r\n    display:flex;\r\n    flex-direction : row;\r\n    align-items :center;\r\n    height: 60px;\r\n    margin: 10px 0 10px;\r\n  }\r\n  .img {\r\n    flex : 0 0 50px;\r\n    height:50px;\r\n    border-radius : 50%;\r\n    \r\n  }\r\n  .wrapper{\r\n    padding : 10px;\r\n  }\r\n  .title {\r\n    font-size : 15px;\r\n    color : black;\r\n    line-height : 5px;\r\n    font-weight :bold;\r\n  }\r\n  .paragraph{\r\n    display : flex;\r\n    color : black;\r\n    flex-direction : column;\r\n    line-height : 15px;\r\n    font-size : 12px;\r\n    overflow : hidden;\r\n    text-overflow : ellipsis;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp : 2;\r\n    -webkit-box-orient:vertical;\r\n  }\r\n  .footer{\r\n    display:flex;\r\n    align-items:center;\r\n    line-height : 15px;\r\n    font-size : 12px;\r\n    \r\n\r\n    \r\n  }\r\n  \r\n\r\n  \r\n`;\r\n\r\nexport default TrelloCard;","export  const initialData = [\r\n    {\r\n        title : \"Applicants\",\r\n        id : `list-${0}`,\r\n        cards : [\r\n            {\r\n                id :`card-${0}`,\r\n                designation : \"React Developer,B.E.\",\r\n                title : \"Yash Bhanushali\",\r\n                about : \"Bachelors in Engineering, Information Technology\",\r\n                image : \"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1868&q=80\"\r\n            },\r\n            {\r\n                id :`card-${1}`,\r\n                designation : \"Node Developer,B.E.\",\r\n                title : \"Harsh Bhanushali\",\r\n                about : \"Bachelors in Engineering, Information Technology\",\r\n                image : \"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1868&q=80\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title : \"Review\",\r\n        id : `list-${1}`,\r\n        cards : []\r\n    },\r\n    {\r\n        title : \"Shortlisted\",\r\n        id : `list-${2}`,\r\n        cards : []\r\n\r\n    }\r\n]","import {CONSTANTS} from './index.js';\r\nimport {initialData} from '../reducers/initialData';\r\n\r\nexport const resetState = () => {\r\n    return {\r\n        type :CONSTANTS.RESET,\r\n        payload : initialData\r\n    }\r\n}\r\n\r\n","export * from './listActions';\r\nexport * from './cardActions';\r\nexport * from './stateActions';\r\nexport * from './resetActions';\r\n\r\nexport const CONSTANTS = {\r\n    STORE_DATA : \"STORE_DATA\",\r\n    ADD_CARD: \"ADD_CARD\",\r\n    ADD_LIST : \"ADD_LIST\",\r\n    DRAG_HAPPENED : 'DRAG_HAPPENED',\r\n    RESET : 'RESET'\r\n}","import {useState} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {connect} from \"react-redux\";\r\nimport {addCard } from \"../actions\";\r\nimport styled from \"styled-components\";\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n\r\n\r\nconst CardForm = (props) => {\r\n    const [isDesignated,setDesignation] = useState('');\r\n    const [hasAbout,setAbout] = useState('');\r\n    const [hasName,setName] = useState('');\r\n    const img_url = \"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1868&q=80\";\r\n\r\n\r\n    //state event handlers\r\n    const handleDesignationChange = (e) => {\r\n        setDesignation(e.target.value);\r\n    }\r\n    const handleNameChange = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n    const handleAboutChange = (e) => {\r\n        setAbout(e.target.value);\r\n    } \r\n    \r\n    //reset states after stateful changes.\r\n    const resetStates = () => {\r\n        setDesignation('');\r\n        setName('');\r\n        setAbout('');\r\n    }\r\n    const onSubmit = () => {\r\n         \r\n         const {dispatch,listID} = props;\r\n         if(isDesignated && hasAbout && hasName){\r\n             console.log('dispatched')\r\n            dispatch(addCard(listID,isDesignated,hasAbout,hasName,img_url));\r\n            resetStates();\r\n        }\r\n      \r\n       props.closeForm();\r\n        return;\r\n    }\r\n\r\n\r\n    return (\r\n        <FormWrapper>\r\n             <Card className = {'card'}>\r\n            <CardContent >\r\n            <form className = {\"form\"} noValidate autoComplete=\"off\">\r\n            <Typography  color=\"textSecondary\" className = {'heading'} gutterBottom>\r\n           New Card\r\n          </Typography>\r\n         \r\n            <TextField  \r\n            className = {'formElements'}\r\n            inputProps = {{style : {fontSize : '15px'}}}\r\n             onChange = {handleDesignationChange} variant=\"outlined\" size=\"small\" label=\"designation\" />\r\n            \r\n            <TextField\r\n             className = {'formElements'} \r\n             onChange = {handleNameChange}\r\n             variant=\"outlined\"\r\n             inputProps = {{style : {fontSize : '15px'}}}\r\n             size=\"small\"\r\n             label=\"name\" />\r\n            <TextField \r\n            className = {'formElements'} \r\n            onChange = {handleAboutChange}\r\n            variant=\"outlined\"\r\n            inputProps = {{style : {fontSize : '15px'}}}\r\n            size=\"small\"\r\n            label=\"about\"  />\r\n            </form>\r\n            <div className={'buttonGroup'}>\r\n            <Button  className = {'button'} onMouseDown = {onSubmit} >Submit</Button>\r\n            <Icon className={'icon'} onMouseDown = {props.closeForm} >close</Icon>\r\n            </div>\r\n            </CardContent>\r\n            \r\n            </Card>\r\n            \r\n           \r\n            </FormWrapper>\r\n        \r\n    );\r\n\r\n}\r\n\r\n\r\nconst FormWrapper  = styled.div`\r\n\r\n.form{\r\n    display : flex;\r\n    align-items : center;\r\n    flex-direction : column;\r\n\r\n}\r\n.formElements{\r\n    margin-bottom : 10px;\r\n   \r\n}\r\n.heading {\r\n    font-weight : bold;\r\n}\r\n.button {\r\n    color:white;\r\n    background-color : #dfe3e6;\r\n    height:30px;\r\n    margin-left:20px;\r\n}\r\n.buttonGroup {\r\n    display : flex;\r\n    flex-direction : row;\r\n    align-items : center;\r\n    margin-top : 5px;\r\n    \r\n}\r\n.icon {\r\n    cursor : pointer;\r\n    margin-left : 5px;\r\n}\r\n\r\n`\r\n;\r\nexport default connect() (CardForm);","import {CONSTANTS} from './index.js';\r\n\r\nexport const addCard = (listId,d,a,t,i) => {\r\n    return {\r\n        type :CONSTANTS.ADD_CARD,\r\n        payload : {listId,d,a,t,i}\r\n    }\r\n}\r\n\r\n","import TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport {useState} from 'react';\r\nimport {addList } from \"../actions\";\r\nimport styled from 'styled-components';\r\nimport Textarea from 'react-textarea-autosize';\r\nimport Icon from '@material-ui/core/Icon';\r\nconst ListForm = (props) => {\r\n    const [hasListName,setListName] = useState('');\r\n    \r\n    const changeHandler = e => {\r\n        setListName(e.target.value);\r\n    }\r\n    const resetState = () => {\r\n        setListName('');\r\n    }\r\n    const listSubmitHandler = e => {\r\n        const {dispatch} = props;\r\n        if(hasListName){\r\n            dispatch(addList(hasListName));\r\n            resetState();\r\n        }\r\n        return;\r\n    }\r\n    \r\n    return (\r\n       <Wrapper>\r\n        <div className = {'container'}>\r\n            <Card className = {'card'}>\r\n            <Textarea placeholder={'Enter List Title'} className = {'textArea'} autoFocus onBlur = {props.closeListForm} onChange = {changeHandler} />\r\n            </Card>\r\n        </div>\r\n        <div className={'buttonGroup'}>\r\n        <Button className = {'button'} onMouseDown = {listSubmitHandler} variant = \"contained\">Submit</Button>\r\n        <Icon className = {'icon'} onMouseDown = {props.closeListForm}>close</Icon>\r\n        </div>\r\n        </Wrapper>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\nconst Wrapper =  styled.div`\r\n\r\n.button {\r\n    color:white;\r\n    background-color : #dfe3e6;\r\n    height:30px;\r\n}\r\n.buttonGroup {\r\n    display : flex;\r\n    flex-direction : row;\r\n    align-items : center;\r\n    margin-top : 5px;\r\n}\r\n.icon {\r\n    cursor : pointer;\r\n    margin-left:  5px;\r\n}\r\n.card{\r\n    min-height:35px;\r\n    min-width:272px;\r\n    padding : 6px 8px 2px;\r\n}\r\n.textArea{\r\n    resize : none;\r\n    width: 100%;\r\n    overflow : hidden;\r\n    outline : none;\r\n    border:none;\r\n}\r\n`;\r\n\r\nexport default ListForm;","import {CONSTANTS} from './index.js';\r\n\r\nexport const addList = (title) => {\r\n    return {\r\n        type :CONSTANTS.ADD_LIST,\r\n        payload : title\r\n    }\r\n}\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n ) => {\r\n     return {\r\n         type : CONSTANTS.DRAG_HAPPENED,\r\n         payload : {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            type\r\n         }\r\n     }\r\n }\r\n","import Icon from '@material-ui/core/Icon';\r\nimport {useState} from 'react';\r\nimport CardForm from './CardForm';\r\nimport ListForm from './ListForm';\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nconst TrelloActionButton = (props) => {\r\n    //states of all the important parameters\r\n    const [isFormOpen ,setFormOpen] = useState(false);\r\n    const [isListFormOpen,setListFormOpen] = useState(false);\r\n\r\n    \r\n    //form handlers\r\n    const openForm = () => setFormOpen(true);\r\n    const closeForm = () => setFormOpen(false);\r\n\r\n    //listForm handlers\r\n    const openListForm = () => setListFormOpen(true);\r\n    const closeListForm = () => setListFormOpen(false);\r\n   \r\n\r\n\r\n    const renderAddButton = () => {\r\n        const {list} = props;\r\n        const buttonText = list ? \"Add another list\" : \"Add another card\";\r\n        const buttonTextOpacity = list ? 1 : 0.5;\r\n        const buttonTextColor  = list ? \"white\" : \"inherit\";\r\n        const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\r\n\r\n        return (\r\n            <div style = {{\r\n                ...styles.openForButtonGroup,\r\n                opacity : buttonTextOpacity,\r\n                color : buttonTextColor,\r\n                backgroundColor : buttonTextBackground\r\n            }}\r\n            onClick = {() => list?openListForm():openForm()}\r\n            >\r\n                <Icon>add</Icon>\r\n                <p>{buttonText}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderForm = () => {\r\n        const {list , dispatch , listID} = props;\r\n        const buttonTitle = list ? \"Add List\" : \"Add Button\";\r\n        //designation , title , about , image\r\n\r\n        return(list ?  <ListForm  dispatch = {dispatch} closeListForm = {closeListForm} />:<CardForm dispatch={dispatch} listID = {listID} closeForm = {closeForm} />)\r\n    }\r\n\r\n    return (isFormOpen || isListFormOpen) ? renderForm() : renderAddButton();\r\n\r\n\r\n}\r\n\r\nconst styles = {\r\n    openForButtonGroup : {\r\n        display : \"flex\",\r\n        alignItems : 'center',\r\n        cursor : 'pointer',\r\n        borderRadius : '3',\r\n        height : 36,\r\n        width : 272,\r\n        paddingLeft : 10\r\n    },\r\n    form : {\r\n        display : \"flex\",\r\n        alignItems : 'center',\r\n        flexDirection : \"column\",\r\n\r\n    },\r\n    formElements : {\r\n        marginBottom : 10\r\n    },\r\n    heading : {\r\n        fontWeight : 'bold'\r\n    }\r\n\r\n}\r\n\r\nexport default connect() (TrelloActionButton);","import TrelloCard from './trelloCard';\r\nimport TrelloActionButton from './TrelloActionButton';\r\nimport {Droppable,Draggable} from 'react-beautiful-dnd';\r\nimport styled from 'styled-components';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nconst TrelloList = ({title , cards , listID, index}) => {\r\n    return( \r\n        <Draggable draggableId = {String(listID)} index = {index}>\r\n            {provided => (\r\n                 <ListContainer {...provided.draggableProps} ref ={provided.innerRef} {...provided.dragHandleProps}>\r\n                <Droppable droppableId = {String(listID)}>\r\n                {provided => (\r\n                    \r\n                     <div className = {'container'} {...provided.droppableProps} ref= {provided.innerRef}>\r\n                     <div className = {'text'}><Typography><CheckIcon fontSize = 'small'>\r\n                         </CheckIcon>{title}</Typography>\r\n                          <div className = {'numberWrapper'}>\r\n                          <Typography className = {'CardsInList'}>{cards.length}</Typography>\r\n                          </div>\r\n                          </div>\r\n                     {cards.map( (card,index) => <TrelloCard listTitle = {title} index = {index} key ={card.id} id = {card.id}  designation = {card.designation} title = {card.title} about = {card.about} image = {card.image} ></TrelloCard>)}\r\n                     <TrelloActionButton listID = {listID} />\r\n                     {provided.placeholder}\r\n                     </div>\r\n                     \r\n                )}\r\n           \r\n            </Droppable>\r\n            </ListContainer>\r\n\r\n            )}\r\n        </Draggable>\r\n        \r\n    );\r\n};\r\n\r\n\r\nconst ListContainer = styled.div`\r\n    .container{\r\n        background-color : #dfe3e6;\r\n        border-radius : 3px;\r\n        width : 270px;\r\n        padding : 8px;\r\n        margin-right : 10px;\r\n        overflow:hidden;\r\n        \r\n    }\r\n    .text{\r\n        display : flex;\r\n        align-items: center;\r\n        flex-direction : row;\r\n        font-weight : bold;\r\n        color : #6E6E6E;\r\n        margin-bottom : 20px;\r\n    }\r\n   .numberWrapper{\r\n       width : 20px;\r\n       height:20px;\r\n       margin-left : 10px;\r\n   }\r\n    .CardsInList {\r\n        width: auto;\r\n        line-height: 20px;\r\n        color : white;\r\n        text-align: center;\r\n        border-radius : 2px;\r\n        border: 2px solid #B4BBC4;\r\n       \r\n    }\r\n  \r\n\r\n   \r\n`;\r\n\r\nexport default TrelloList;","import TrelloList from './components/TrelloList';\nimport {connect} from 'react-redux';\nimport TrelloActionButton from './components/TrelloActionButton';\nimport {DragDropContext,Droppable} from 'react-beautiful-dnd';\nimport {sort ,addState,resetState} from './actions';\nimport styled from 'styled-components';\nimport Typography from '@material-ui/core/Typography';\nimport {useEffect} from 'react';\nimport {initialData} from './reducers/initialData';\nimport Button from '@material-ui/core/Button';\n\n\n\n\n\nfunction App(props) {\n  const {lists,dispatch} = props;\n  useEffect(() => {\n    if(localStorage.getItem('state') === null){\n      dispatch(resetState());\n    }\n    else{\n      dispatch(addState(JSON. parse(localStorage.getItem('state'))));\n    }\n  },[])\n\n  const handleReset = () => {\n    localStorage.clear();\n    dispatch(resetState(initialData));\n\n  }\n  const onDragEnd = result => {\n    //TODO : reordering\n    const {destination,source,draggableId,type} = result;\n    if(!destination){\n      return;\n    }\n    props.dispatch(sort(source.droppableId,\n      destination.droppableId,\n      source.index,\n      destination.index,\n      draggableId,\n      type));\n  }\n  return (\n    <DragDropContext onDragEnd= {onDragEnd}>\n    <div className=\"App\">\n      <h2><Typography >Trello Kanban Board</Typography></h2>\n      <Button  style = {styles.button}onClick = {handleReset}>RESET</Button>\n      <Droppable droppableId = \"all-list\" direction=\"horizontal\" type = \"list\">\n        {provided => (\n          <ListContainer {...provided.droppableProps} ref ={provided.innerRef}>\n       \n          {lists.map((list,index) => <TrelloList listID = {list.id} index = {index}  key = {list.id} title = {list.title} cards = {list.cards}></TrelloList>)}\n          <TrelloActionButton  list></TrelloActionButton>\n      \n          </ListContainer>  \n        )\n\n        }\n      </Droppable> \n      \n    </div>\n    </DragDropContext>\n\n  );\n}\nconst mapStateToProps = state => ({\n  lists : state.lists\n});\n\nconst styles = {\n  button : {\n    color:'white',\n    backgroundColor : '#dfe3e6',\n    height:'30px',\n    marginBottom:'20px'\n}\n}\nconst ListContainer = styled.div`\ndisplay : flex;\nflexDirection : row;\nmarginRight : 10;\n`;\n\nexport default connect(mapStateToProps) (App);\n","import {CONSTANTS} from './index.js';\r\nimport {initialData} from '../reducers/initialData';\r\nimport axios from 'axios';\r\n//add state for db which is supposed to render it first.\r\n\r\n/*\r\nexport const addState = () => {\r\n    const url = \"http://localhost:4000/\";\r\n    return (dispatch) => {\r\n        return axios.get(`${url}fetchData`)\r\n        .then(response => {\r\n            console.log(response.data);\r\n            return response.data\r\n        })\r\n        .then(data =>  {\r\n            dispatch({\r\n                type : CONSTANTS.STORE_DATA,\r\n                payload : data[0].lists\r\n            })\r\n        })\r\n        .catch(err => {\r\n            throw(err);\r\n        });\r\n    };\r\n};\r\n*/\r\nexport const addState = (newStateData) => {\r\n    return {\r\n        type : CONSTANTS.STORE_DATA,\r\n        payload : newStateData\r\n    }\r\n}","import {CONSTANTS} from '../actions';\r\nimport axios from 'axios';\r\nimport {initialData} from './initialData';\r\n\r\nlet listId = 3;\r\nlet cardId = 2;\r\n\r\n\r\nasync function updateDatabase(stateObject) {\r\n    // fetch data from a url endpoint\r\n    const data = await axios.post(\"http://localhost:4000/updateDatabase\",{stateObject : stateObject})\r\n    .then((res) => console.log(res.statusCode))\r\n    .catch((err) => console.log('error in db'))\r\n\r\n  }\r\n\r\n  function CountCard(newState)  {\r\n    let card_count = 0;\r\n    newState.map(list => {\r\n        let curr_cards = list.cards;\r\n        card_count += curr_cards.length;\r\n    })\r\n    return card_count;\r\n}\r\n\r\nfunction storeLocally(state){\r\n    localStorage.setItem('state',JSON.stringify(state));\r\n}\r\n\r\nconst listsReducer = (state = [] , action) => {\r\n    switch(action.type){\r\n\r\n\r\n        case CONSTANTS.RESET: {\r\n            const newState = initialData;\r\n            listId = 3;\r\n            cardId = 2;\r\n            console.log('reset id ' + cardId);\r\n            //updateDatabase(newState);\r\n            storeLocally(newState);\r\n            return newState;\r\n        }\r\n\r\n        case CONSTANTS.STORE_DATA: {\r\n            const newState = action.payload;\r\n            listId = newState.length;\r\n            cardId =  CountCard(newState);\r\n            console.log('in store data : ', cardId);\r\n            storeLocally(newState);\r\n            return newState;\r\n        }\r\n\r\n        case CONSTANTS.ADD_LIST:{\r\n            const newList = {\r\n                title : action.payload,\r\n                cards : [],\r\n                id : `list-${listId}`\r\n            };\r\n            listId = state.length + 1;\r\n            const newState =  [...state,newList];\r\n            //updateDatabase(newState);\r\n            storeLocally(newState);\r\n            return newState;\r\n        }\r\n\r\n        //listId,d,a,t,img\r\n        case CONSTANTS.ADD_CARD: {\r\n            console.log('new card id is ' + cardId);\r\n            const newCard = {\r\n                id : `card-${cardId}`,\r\n                designation : action.payload.d,\r\n                title : action.payload.t,\r\n                about : action.payload.a,\r\n                image : action.payload.i\r\n\r\n            };\r\n        \r\n            \r\n            const newState = state.map(list => {\r\n\r\n\r\n                if(list.id === action.payload.listId){\r\n\r\n                  \r\n                    return {\r\n                        ...list,\r\n                        cards : [...list.cards,newCard]\r\n                    }\r\n                }\r\n                else{\r\n                    return list;\r\n                }\r\n            });\r\n           // updateDatabase(newState);\r\n          \r\n            cardId = CountCard(newState);\r\n            storeLocally(newState);\r\n            console.log('in add data : ', cardId);\r\n            return newState;\r\n        }\r\n        \r\n        case CONSTANTS.DRAG_HAPPENED:{\r\n            const {droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexEnd,\r\n                droppableIndexStart,\r\n                draggableId,type} = action.payload;\r\n            const newState  = [...state];\r\n            if(type === 'list'){\r\n                const list = newState.splice(droppableIndexStart,1);\r\n                newState.splice(droppableIndexEnd,0,...list);\r\n                //updateDatabase(newState);\r\n                storeLocally(newState);\r\n                return newState;\r\n            }\r\n            //if same list\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart,1);\r\n                list.cards.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n            //if list is different.\r\n            if(droppableIdStart !== droppableIdEnd){\r\n                //find list where drag happened\r\n                const listStart = state.find(list => droppableIdStart === list.id);\r\n                //pull that card.\r\n                const card = listStart.cards.splice(droppableIndexStart,1);\r\n                //find list where drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n                //put card in new list\r\n                listEnd.cards.splice(droppableIndexEnd,0,...card);\r\n\r\n            }\r\n            //updateDatabase(newState);\r\n            storeLocally(newState);\r\n            return newState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default listsReducer;","import {combineReducers} from 'redux';\r\nimport listReducer from './listReducer';\r\nimport {persistReducer} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n\r\nexport default combineReducers({\r\n    lists : listReducer\r\n});\r\n\r\n// default persistReducer(persistConfig,rootReducer);","import {createStore,applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport combineReducers from \"../reducers\";\r\nimport {addState} from '../actions';\r\n\r\nexport const store = createStore(combineReducers,applyMiddleware(thunk));\r\n//store.dispatch(addState());\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {store} from './store';\nimport {Provider} from 'react-redux';\nimport 'typeface-roboto';\n\n\nReactDOM.render(\n  <Provider store = {store}> \n    <App />\n    </Provider> \n,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}